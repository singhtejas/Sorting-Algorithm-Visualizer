{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingAlgorithms/BubbleSort.js","SortingAlgorithms/InsertionSort.js","SortingAlgorithms/SelectionSort.js","App.js","index.js"],"names":["getMergeSortVisuals","array","visuals","helperArray","slice","mergeSortHelper","startIndex","lastIndex","animations","middleIndex","Math","floor","sortedArray","start","afterMiddle","push","i","merger","length","SortingVisualizer","props","state","document","body","style","backgroundColor","this","refreshArray","random","setState","isColorChange","arrayBars","getElementsByClassName","firstBar_index","secondBar_index","color","firstBar_Style","secondBar_Style","setTimeout","barOneIdx","newHeight","height","willSwap","temp","bubbleSort","getBubbleSortVisuals","barIndex","barStyle","len","currentValue","j","insertionSort","getInsertionSortVisuals","indexOfMin","selectionSort","getSelectionSortVisuals","className","map","index","key","onClick","mergeSorter","bubbleSorter","insertionSorter","selectionSorter","Component","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f37dba9d.chunk.js","sourcesContent":["// function that returns the sorted array using merge sort for the animation:\nexport function getMergeSortVisuals(array)\n{\n    let visuals = []; //creating a new array called visuals which will have comparing values for animations purposes\n    let helperArray = array.slice(); \n    mergeSortHelper(helperArray,0,helperArray.length-1,visuals); \n\n    return visuals; \n\n}\n\n//function that will split the array into smaller arrays, then merge them:\nfunction mergeSortHelper(helperArray, startIndex, lastIndex, animations) \n{\n    // no further call when index is alone:\n    if(startIndex === lastIndex) \n    {\n        return;\n    }\n\n    //math.floor used to round the middle value down to get the middle index:\n    const middleIndex = Math.floor((startIndex + lastIndex)/2); \n    mergeSortHelper(helperArray,startIndex, middleIndex, animations); \n    mergeSortHelper(helperArray,middleIndex+1, lastIndex, animations); \n    merger(helperArray,startIndex,middleIndex, lastIndex,animations); \n    \n}\n// inputs the left and right half of sorted arrays into a 'sortedArray' array and inputs merge sort comparison...\n// ...values into an animation array in order to color code later :\nfunction merger(helperArray,startIndex, middleIndex, lastIndex,animations) \n{\n    let sortedArray = []; \n    let start = startIndex; \n    let afterMiddle = middleIndex + 1; \n\n    while ((start <= middleIndex) && ((afterMiddle) <= lastIndex)) \n    {\n        animations.push([\"color-indicator\", start, afterMiddle]); //comparison values to color\n        animations.push([\"revert-color\", start, afterMiddle]); //revert color\n\n\n        if(helperArray[start] <= helperArray[afterMiddle]) \n        {\n            sortedArray.push(helperArray[start++]);\n        } else\n        {\n            sortedArray.push(helperArray[afterMiddle++]);\n        }\n    }\n\n    while(start <= middleIndex)\n    {\n        animations.push([\"color-indicator\", start, start]); //comparison values to color\n        animations.push([\"revert-color\", start, start]); //revert color\n      \n        //copy elements into sortedArray:\n        sortedArray.push(helperArray[start++]); \n    }\n\n    while((afterMiddle) <= lastIndex)\n    {\n        animations.push([\"color-indicator\", afterMiddle, afterMiddle]); //comparison values to color\n        animations.push([\"revert-color\", afterMiddle, afterMiddle]); //revert color\n      \n        //copy elements into sortedArray:\n        sortedArray.push(helperArray[afterMiddle++]); \n\n    }\n    for (let i = startIndex; i <= lastIndex; i++) \n    {\n        animations.push([\"color-indicator\", i, i - startIndex]);\n        animations.push([\"overwrite\", i, sortedArray[i - startIndex]]);\n        animations.push([\"revert-color\", i, i - startIndex]);\n        helperArray[i] = sortedArray[i - startIndex];\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortVisuals} from '../SortingAlgorithms/MergeSort';\nimport {getBubbleSortVisuals} from '../SortingAlgorithms/BubbleSort';\nimport {getInsertionSortVisuals} from '../SortingAlgorithms/InsertionSort';\nimport {getSelectionSortVisuals} from '../SortingAlgorithms/SelectionSort';\n\nclass SortingVisualizer extends Component\n{\n\n    constructor(props)\n    {\n        super(props);\n\n        this.state = \n        {\n            array: []\n        };\n    }\n\n    componentDidMount()\n    {\n        document.body.style.backgroundColor ='#eae7dc';\n        this.refreshArray();\n    }\n\n    refreshArray()\n    {\n        const array = [];\n        for(let i = 0; i <245; i++)\n        {\n            array.push(Math.floor(Math.random()*(710 - 10 + 1))+ 10);\n        }\n        array.backgroundColor = '#00887a';\n        this.setState({array});\n\n    }\n\n    // Soritng Algorithms Below (Merge Sort, Selection Sort, Insertion Sort, and Bubble Sort):\n    //      - for the methods below, similar structure is used uniformily to improve readability\n    mergeSorter(){\n \n        const visuals = getMergeSortVisuals(this.state.array);\n        for(let i = 0; i < visuals.length; i++)\n        {\n            let isColorChange;\n             if(visuals[i][0] == \"color-indicator\" || visuals[i][0] == \"revert-color\")\n             {\n                 isColorChange = true;\n             }\n             else\n                isColorChange = false;\n\n            const arrayBars = document.getElementsByClassName('bars');\n\n            if(isColorChange === true)\n            {\n               const [indicator, firstBar_index, secondBar_index] = visuals[i];\n               const color = (visuals[i][0] == \"color-indicator\") ? 'yellow' : '#00887a';\n               const firstBar_Style = arrayBars[firstBar_index].style;\n               const secondBar_Style = arrayBars[secondBar_index].style;\n            \n\n                setTimeout(() =>\n                {\n                    firstBar_Style.backgroundColor = color;\n                    secondBar_Style.backgroundColor = color;\n\n                }, i* 2);\n\n            } else\n            {\n                setTimeout(() => \n                {\n                    const [overwrite, barOneIdx, newHeight] = visuals[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                },i* 2);\n            }\n\n        }\n    }\n\n    bubbleSorter()\n    {\n        const visuals = getBubbleSortVisuals(this.state.array);\n\n        for (let i = 0; i < visuals.length; i++)\n         {\n            let isColorChange;\n             if(visuals[i][0] == \"color-indicator\" || visuals[i][0] == \"revert-color\")\n             {\n                 isColorChange = true;\n             }\n             else\n                isColorChange = false;\n\n            const arrayBars = document.getElementsByClassName('bars');\n\n            if(isColorChange === true) \n            {\n                const color = (visuals[i][0] == \"color-indicator\") ? 'yellow' : '#00887a';\n                const [indicator, firstBar_index, secondBar_index] = visuals[i]; \n                const firstBar_Style = arrayBars[firstBar_index].style;\n                const secondBar_Style = arrayBars[secondBar_index].style;\n\n                setTimeout(() => \n                {\n                    firstBar_Style.backgroundColor = color;\n                    secondBar_Style.backgroundColor = color;\n                },i * 10);\n            }\n            else \n            {\n                const [willSwap, barIndex, newHeight] = visuals[i];\n                const barStyle = arrayBars[barIndex].style;\n\n                setTimeout(() => \n                {\n                    barStyle.height = `${newHeight}px`;\n                },i * 10);  \n            }\n        }\n    }\n\n    insertionSorter(){\n        const visuals = getInsertionSortVisuals(this.state.array);\n\n        for (let i = 0; i < visuals.length; i++)\n         {\n             let isColorChange;\n             if(visuals[i][0] == \"color-indicator\" || visuals[i][0] == \"revert-color\")\n             {\n                 isColorChange = true;\n             }\n             else\n                isColorChange = false;\n                \n            const arrayBars = document.getElementsByClassName('bars');\n\n            if(isColorChange === true) \n            {\n                const color = (visuals[i][0] == \"color-indicator\") ? 'yellow' : '#00887a';\n                const [indicator, firstBar_index, secondBar_index] = visuals[i]; \n                const firstBar_Style = arrayBars[firstBar_index].style;\n                const secondBar_Style = arrayBars[secondBar_index].style;\n\n                setTimeout(() => \n                {\n                    firstBar_Style.backgroundColor = color;\n                    secondBar_Style.backgroundColor = color;\n                },i * 2);\n            }\n            else {\n                const [value, barIndex, newHeight] = visuals[i];\n                const barStyle = arrayBars[barIndex].style;\n\n                setTimeout(() => \n                {\n                    barStyle.height = `${newHeight}px`;\n                },i * 2);  \n            }\n        }\n    }   \n\n    selectionSorter(){\n        const visuals = getSelectionSortVisuals(this.state.array);\n\n        for (let i = 0; i < visuals.length; i++) \n        {\n            let isColorChange;\n             if(visuals[i][0] == \"color-indicator\" || visuals[i][0] == \"revert-color\")\n             {\n                 isColorChange = true;\n             }\n             else\n                isColorChange = false;\n            const arrayBars = document.getElementsByClassName('bars');\n\n            if(isColorChange === true)\n            {\n                const color = (visuals[i][0] === \"color-indicator\") ? 'yellow' : '#00887a';\n                const [temp, firstBar_index, secondBar_index] = visuals[i];\n                const firstBar_Style = arrayBars[firstBar_index].style;\n                const secondBar_Style = arrayBars[secondBar_index].style;\n\n                setTimeout(() => \n                {\n                    firstBar_Style.backgroundColor = color;\n                    secondBar_Style.backgroundColor = color;\n                },i * 5);\n            }\n            else \n            {\n                const [temp, barIndex, newHeight] = visuals[i];\n                const barStyle = arrayBars[barIndex].style;\n\n                setTimeout(() => \n                {\n                    barStyle.height = `${newHeight}px`;\n                },i * 5);  \n            }\n        }\n    }\n\n    render(){\n        const {array} = this.state;\n\n        return(\n        <div className = \"container\">\n            {array.map((currentValue, index) => (\n                <div \n                    className = \"bars\" \n                    key={index}\n                    style = {{height: `${currentValue}px`}}>\n                </div>\n                \n            ))}\n            <footer className= \"footer\">\n            <br></br>\n                <u>Generate a New Array</u>: <button onClick= {() => this.refreshArray()}> Randomize Array </button> &nbsp; &nbsp;\n                <u>Algorithms</u>: <button onClick= {() => this.mergeSorter()}> Merge Sort </button> &nbsp;\n                <button onClick= {() => this.bubbleSorter()}> Bubble Sort</button> &nbsp;\n                <button onClick= {() => this.insertionSorter()}> Insertion Sort</button> &nbsp;\n                <button onClick= {() => this.selectionSorter()}> Selection Sort </button> &nbsp;\n            </footer>\n            <br></br>\n                \n        </div>\n        );\n    }\n}\n\nexport default SortingVisualizer;","// function that returns the sorted array using bubble sort for the animation:\nexport function getBubbleSortVisuals(array) \n{\n    let visuals = [];\n    let helperArray = array.slice();\n    bubbleSort(helperArray,visuals);\n    return visuals;\n}\n\nfunction bubbleSort(helperArray, visuals) \n{\n    let lastIndex = helperArray.length-1;\n    while(lastIndex > 0) \n    {\n        //iterate from the first to last index:\n        let willSwap = false;\n        for(let i = 0; i < lastIndex; i++) \n        {\n            visuals.push([\"color-indicator\", i, i + 1]); //comparison values to color\n            visuals.push([\"revert-color\", i, i + 1]); // revert color\n            \n            if(helperArray[i] > helperArray[i + 1]) \n            {\n                //push values in visuals array for animatino pursposes:\n                willSwap = true;\n                visuals.push([\"yes-swap\", i, helperArray[i + 1]]);\n                visuals.push([\"yes-swap\", i + 1, helperArray[i]]);\n\n                //swap values:\n                let temp = helperArray[i]; \n                helperArray[i] = helperArray[i+1];\n                helperArray[i+1] = temp;\n            }\n        }\n        if(willSwap === false)\n        {\n            break;\n        }\n        lastIndex--;\n    }\n}\n","// function that returns the sorted array using insertion sort for the animation:\nexport function getInsertionSortVisuals(array)\n{\n    let visuals = [];\n    let helperArray = array.slice();\n\n    insertionSort(helperArray, visuals);\n\n    return visuals;\n}\n\nfunction insertionSort(helperArray,visuals)\n{\n    const len = helperArray.length;\n    // comparing elements sequentially:\n    for(let i = 1; i < len; i++)\n    {\n        let currentValue  = helperArray[i];\n        let j = i - 1;\n\n        visuals.push([\"color-indicator\", j, i]); //comparison values to color\n        visuals.push([\"revert-color\",j, i]); // revert the color\n\n        while(j>=0 && helperArray[j] > currentValue)\n        {\n            visuals.push([\"color-indicator\", j, i]); //comparison values to color\n            visuals.push([\"revert-color\",j, i]); // revert color\n\n            visuals.push([\"overwrite\", j+1, helperArray[j]]);\n            helperArray[j+1] = helperArray[j];\n            j--;\n\n        }\n\n        // overwrite values in visuals array:\n        visuals.push([\"overwrite\", j+1, currentValue]);\n        helperArray[j+1] = currentValue;\n    }\n\n\n}","// function that returns the sorted array using selection sort for the animation:\nexport function getSelectionSortVisuals(array) {\n    let visuals = [];\n    let helperArray = array.slice();\n    selectionSort(helperArray, visuals);\n    \n    return visuals;\n}\n\nfunction selectionSort(helperArray, visuals) \n{   \n    //finds the new smallest element value and puts it at the beginning:\n    for (let i = 0; i < helperArray.length; i++) \n    {\n        let indexOfMin = i; \n        for (let j = i + 1; j < helperArray.length; j++) \n        {\n            //\n            visuals.push([\"color-indicator\", j, indexOfMin]);//comparison values to color\n            visuals.push([\"revert-color\", j, indexOfMin]); //revert coloring\n\n            if (helperArray[j] < helperArray[indexOfMin]) \n            {\n                indexOfMin = j;\n            }\n        }\n\n        visuals.push([\"swap\", indexOfMin, helperArray[i]]);\n        visuals.push([\"swap\", i, helperArray[indexOfMin]]);\n\n        // swap values:\n        if(indexOfMin !== i)\n        {\n            let temp = helperArray[indexOfMin];\n            helperArray[indexOfMin] = helperArray[i];\n            helperArray[i] = temp;\n        }\n        \n    }\n}\n","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\n\nfunction App(){\n    return(\n      <div className=\"App\">\n          <div className = \"header\">\n          <h1><u>Sorting Algorithms Visualizer</u></h1>\n             <i><p> ** To exit an Algorithm, please refresh the page ** </p></i> \n              <p> By: Tejas Singh </p>\n\n          </div>\n          \n          <SortingVisualizer></SortingVisualizer>\n      </div>\n    );\n  }\n\nexport default App; \n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}